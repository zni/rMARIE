#!/usr/bin/env ruby
# Copyright (c) 2011 Matthew Godshall
#
# This file is part of rMARIE.
#
# rMARIE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rMARIE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rMARIE.  If not, see <http://www.gnu.org/licenses/>.
#

require 'optparse'

require 'rmarie'

import_vm

def main
    # Set-up and parse command line options.
    options = Hash.new
    optparse = setup_optparse(options)
    optparse.parse!
    
    # If no file is provided, display help text.
    if ARGV.empty?
        puts optparse
        exit false
    end
    
    # Check file extension and retrieve binary file name.
    if ARGV[0] =~ /.*\.rmex$/i
        binary_file = ARGV[0]
    else
        STDERR.puts "Filename must have the extension '.rmex', ex: foo.rmex"
        exit false
    end

    # Load the serialized machine code object.
    mcode = nil

    begin
        File.open(binary_file,'r') do |f|
            mcode = Marshal.load f
        end
    rescue StandardError => e
        STDERR.puts "#{e}: #{e.message}"
        STDERR.puts "Error loading machine code file."
        exit false
    end

    # Initialize the virtual machine, run the machine code, and dump the final
    # state of the registers and memory.
    vm = Rmarie::VM.new options[:verbose]
    vm.load_program mcode
    vm.start_vm
    vm.dump
end

# Perform OptionParser initialization.
# TODO Add option to print dump to console or file.
#
def setup_optparse options
    OptionParser.new do |opts|
        opts.banner = "usage: rmarie-vm [options] file.rmex"

        options[:verbose] = false
        opts.on('-v','--verbose','Display full virtual machine memory dump.') do
            options[:verbose] = true
        end

        options[:dump] = nil
        opts.on('-d','--dump-file dumpfile','dump file name [<filename>.dump]') do |file|
            options[:dump] = file
        end

        opts.on('-h','--help','Display this screen.') do
            puts opts
            exit
        end
    end
end

main
