#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'rmarie/lexer.rex'
require 'rmarie/machinecode'
require 'rmarie/symboltable'
require 'rmarie/uint16'

module Rmarie
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 150)
# Lex and parse the given file.
#
def parse_file file

    # Initialize the lexer and parser.
    lexer = Lexer.new
    parser = Parser.new
    tokens = Array.new

    # Scan the assembly source file.
    begin
        File.new(file).each_line do |line|
            lexer.scan_setup(line)
            while token = lexer.next_token
                tokens.push token
            end
        end
    rescue StandardError => e
        STDERR.puts #{e.message}
        exit false
    end
    
    mcode = parse tokens

    if @fail
        abort "Assembly failed."
    else
        backpatch mcode
    end
end


# User defined 'parse' function for racc.
#
def parse tokens
    @loc = 0
    @sym = SymbolTable.new
    @offset = 0
    @tokens = tokens
    @fail = false

    @tokens.push [false, false]
    do_parse

end


# User defined 'next_token' function for racc.
#
def next_token
    @tokens.shift
end


# User defined 'on_error' function for racc.
# TODO Add actual error handling.    
#
def on_error error_token, error_value, stack
    STDERR.puts token_to_str error_token
    STDERR.puts "error value: #{error_value}"
    STDERR.puts "current stack: #{stack}"
end


# Process an array of machine code, replacing symbol names with their locations
# from the symbol table.
#
def backpatch lst
    lst.map do |x|
        code, str = x
        if str.nil?
            code
        else
            addr = @sym.lookup str
            if addr.nil?
                abort "Label #{str} never declared."
            else
                code | addr
            end
        end
    end
end

# Process a unary operator.
#
def unop op, v
    if v.is_a? Integer
        return Rmarie::INS[op] | v
    else
        return [Rmarie::INS[op], v]
    end
end

# Process an decimal value.
#
def int v
    if (v > 32767) or (v < -32768)
        STDERR.puts "Decimal value must be between -32768 and 32767."
        @fail = true
        return 0
    else
        return (UInt16.from_signed v)
    end
end

# Process a hexadecimal value.
def hex v
    if (v >= 0x0) and (v <= 0xFFFF)
        return v
    else
        STDERR.puts "Hex value must be between 0x0 and 0xFFFF."
        @fail = true
        return 0
    end
end

attr_reader :loc, :sym, :offset
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,    16,    17,     7,    24,     8,     9,    10,    11,     7,
    26,     8,     9,    10,    11,     7,    25,     8,     9,    10,
    11,     7,    18,     8,     9,    10,    11,    27,    28,    29,
    30,    22,    23,    20,    22,    23,    20,    12,    32,    33 ]

racc_action_check = [
     0,     4,     4,     0,    10,     0,     0,     0,     0,     3,
    12,     3,     3,     3,     3,     2,    11,     2,     2,     2,
     2,    13,     7,    13,    13,    13,    13,    18,    18,    18,
    18,    27,    27,    27,     8,     8,     8,     1,    29,    30 ]

racc_action_pointer = [
    -2,    37,    10,     4,    -2,   nil,   nil,    16,    31,   nil,
     1,    12,    10,    16,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,    35,
    35,   nil,   nil,   nil ]

racc_action_default = [
   -21,   -21,   -21,    -2,   -21,    -5,    -6,   -21,   -21,   -12,
   -21,   -21,   -21,    -1,    -7,    -8,    -3,    -4,   -21,   -11,
   -17,   -18,   -19,   -20,   -15,   -16,    34,   -21,   -10,   -21,
   -21,    -9,   -13,   -14 ]

racc_goto_table = [
    19,    15,    14,     3,     2,    13,     1,   nil,   nil,   nil,
   nil,    15,    14,   nil,   nil,   nil,   nil,   nil,   nil,    31 ]

racc_goto_check = [
     6,     5,     4,     3,     2,     3,     1,   nil,   nil,   nil,
   nil,     5,     4,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     6,     4,     3,    -1,    -2,    -8,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,     6,   nil,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 12, :_reduce_1,
  1, 12, :_reduce_2,
  2, 13, :_reduce_3,
  2, 13, :_reduce_4,
  1, 14, :_reduce_5,
  1, 14, :_reduce_6,
  2, 14, :_reduce_7,
  2, 14, :_reduce_8,
  4, 15, :_reduce_9,
  3, 15, :_reduce_10,
  2, 15, :_reduce_11,
  1, 15, :_reduce_12,
  4, 16, :_reduce_13,
  4, 16, :_reduce_14,
  2, 16, :_reduce_15,
  2, 16, :_reduce_16,
  1, 17, :_reduce_17,
  1, 17, :_reduce_18,
  1, 18, :_reduce_19,
  1, 18, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 34

racc_token_table = {
  false => 0,
  :error => 1,
  :ORG => 2,
  :INT => 3,
  :HEX => 4,
  :LABEL => 5,
  "," => 6,
  :UNOP => 7,
  :OP => 8,
  :T_DEC => 9,
  :T_HEX => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORG",
  "INT",
  "HEX",
  "LABEL",
  "\",\"",
  "UNOP",
  "OP",
  "T_DEC",
  "T_HEX",
  "$start",
  "program",
  "directive",
  "statements",
  "statement",
  "declaration",
  "value",
  "address" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_1(val, _values, result)
                        result = val[1]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_2(val, _values, result)
                        result = val[0]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_3(val, _values, result)
                        @offset = val[1]
                    @loc = @loc + @offset
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_4(val, _values, result)
                        @offset = val[1]
                    @loc = @loc + @offset
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_5(val, _values, result)
                        return val
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_6(val, _values, result)
                        return val
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_7(val, _values, result)
                        result.push val[1]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_8(val, _values, result)
                        result.push val[1]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_9(val, _values, result)
                        @sym.insert val[0], @loc
                    @loc = @loc.next
                    return unop val[2], val[3]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_10(val, _values, result)
                        @sym.insert val[0], @loc
                    @loc = @loc.next
                    return Rmarie::INS[val[2]]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_11(val, _values, result)
                        @loc = @loc.next
                    return unop val[0], val[1]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_12(val, _values, result)
                        @loc = @loc.next
                    return Rmarie::INS[val[0]]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_13(val, _values, result)
                        @sym.insert val[0], @loc
                    @loc = @loc.next
                    return int val[3]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_14(val, _values, result)
                        @sym.insert val[0], @loc
                    @loc = @loc.next
                    return hex val[3]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_15(val, _values, result)
                        @loc = @loc.next
                    return int val[1]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_16(val, _values, result)
                        @loc = @loc.next
                    return hex val[1]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_17(val, _values, result)
                        v = @sym.lookup val[0]

                    if v.nil?
                        return val[0]
                    else
                        v
                    end
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_18(val, _values, result)
                        return val[0]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_19(val, _values, result)
                        if (val[0] >= 0) and (val[0] <= 4095)
                        return val[0]
                    else
                        STDERR.puts "Address must be between 0 and 4095."
                        @fail = true
                        return val[0]
                    end
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_20(val, _values, result)
                        if (val[0] >= 0x0) and (val[0] <= 0xFFF)
                        return val[0]
                    else
                        STDERR.puts "Address must be between 0x0 and 0xFFF."
                        @fail = true
                        return val[0]
                    end
                
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rmarie
